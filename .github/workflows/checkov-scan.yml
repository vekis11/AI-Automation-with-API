name: Security Scan (Checkov, Trivy, Semgrep, OWASP Threat Dragon)

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  checkov:
    name: Checkov - IaC Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: all
          output_format: cli,sarif
          output_file_path: console,checkov-results.sarif
      
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov'

  trivy:
    name: Trivy - Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner in repo mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
      
      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          scanners: 'vuln,config,secret'
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'

  semgrep:
    name: Semgrep - Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/ci
      
      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep'
        continue-on-error: true

  threat-dragon:
    name: OWASP Threat Dragon - Threat Modeling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Check for threat model files
        id: check-threat-models
        run: |
          if find . -name "*.json" -path "*/threat*" -o -name "*threat-model*.json" | grep -q .; then
            echo "threat_models_found=true" >> $GITHUB_OUTPUT
          else
            echo "threat_models_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Run OWASP Threat Dragon (if threat models exist)
        if: steps.check-threat-models.outputs.threat_models_found == 'true'
        run: |
          echo "Threat model files found. Validating with OWASP Threat Dragon..."
          
          # Install Threat Dragon CLI via npm (Threat Dragon v2 uses npm)
          npm install -g @owasp/threat-dragon-cli || echo "Threat Dragon CLI installation skipped if not available"
          
          # Try to validate threat model files
          find . -name "*threat-model*.json" -o -name "*.json" | head -5 | while read file; do
            echo "Checking threat model file: $file"
            # Basic JSON validation
            if command -v jq &> /dev/null; then
              jq empty "$file" 2>/dev/null && echo "✓ $file is valid JSON" || echo "✗ $file has JSON errors"
            fi
          done || echo "Threat model validation completed"
        continue-on-error: true
      
      - name: Upload threat model artifacts
        if: always() && steps.check-threat-models.outputs.threat_models_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: threat-models
          path: |
            **/*threat-model*.json
            **/threat*.json
          retention-days: 30
      
      - name: Threat Dragon summary
        if: always()
        run: |
          echo "## 🐉 OWASP Threat Dragon Threat Modeling" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check-threat-models.outputs.threat_models_found }}" == "true" ]; then
            echo "✅ Threat model files found and processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Threat models have been validated and are available as artifacts." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Note:** OWASP Threat Dragon is primarily a visual threat modeling tool." >> $GITHUB_STEP_SUMMARY
            echo "For full threat modeling capabilities, use the [OWASP Threat Dragon desktop application](https://owasp.org/www-project-threat-dragon/)." >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No threat model files found in repository" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Tip:** Create threat model JSON files to visualize and track security threats." >> $GITHUB_STEP_SUMMARY
            echo "Download OWASP Threat Dragon from: https://github.com/OWASP/threat-dragon" >> $GITHUB_STEP_SUMMARY
          fi
