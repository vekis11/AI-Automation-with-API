name: Security Scan (Checkov, Trivy, Semgrep, OWASP Threat Dragon)

# Comprehensive Security Scanning Workflow
# This workflow scans ALL supported IaC frameworks and infrastructure types including:
# Cloud Infrastructure: Terraform (.tf, .tfvars, .tf.json, modules, Cloud/Enterprise), Terraform CDK,
#   CloudFormation (.yaml, .yml, .json, SAM templates), ARM templates, Bicep (.bicep),
#   GCP Deployment Manager, OpenStack Heat templates
# Containers: Kubernetes (YAML, Kustomize), Helm charts, Docker (Dockerfile, docker-compose.yml)
# CI/CD: GitHub Actions, GitLab CI, CircleCI, Bitbucket Pipelines, Argo Workflows
# Serverless: Serverless Framework, AWS SAM
# Config Mgmt: Ansible, Chef, Puppet
# Other: Pulumi, OpenAPI/Swagger, General JSON/YAML
# Cloud Providers: AWS (S3, IAM, VPC, EC2, RDS, Lambda), Azure (Storage, Key Vault, App Service),
#   GCP (Compute, Storage, IAM), Alibaba Cloud (ACS, OSS)

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  checkov:
    name: Checkov - Comprehensive IaC Security Scan (All Frameworks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better scanning
      
      - name: Run Checkov - Scan ALL IaC Frameworks
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .  # Scans entire repository recursively
          framework: all  # Auto-detects and scans: Terraform, CloudFormation, ARM, Bicep, Kubernetes, Docker, Helm, GitHub Actions, GitLab CI, CircleCI, Serverless, Ansible, Chef, Puppet, Pulumi, OpenAPI/Swagger, and all supported formats
          output_format: cli,sarif
          output_file_path: console,checkov-results.sarif
          check: ''  # Run all checks (no exclusions)
          skip_check: ''  # Don't skip any checks
          quiet: false  # Show detailed output
          soft_fail: false  # Fail on security issues
      
      - name: Upload Checkov results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif
          category: 'checkov-iac-all-frameworks'

  trivy:
    name: Trivy - Comprehensive Vulnerability & Config Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret detection
      
      - name: Run Trivy vulnerability scanner (SARIF output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'  # Scans entire repository
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln,config,secret'  # Vulnerabilities, misconfigurations, secrets
      
      - name: Upload Trivy SARIF results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-comprehensive'
      
      - name: Run Trivy filesystem scan (detailed output)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'  # Scans all files: Dockerfiles, docker-compose, K8s manifests, Terraform, CloudFormation, etc.
          scanners: 'vuln,config,secret'  # All scanner types
          format: 'table'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'  # Don't fail workflow, report only
      
      - name: Run Trivy config scan for IaC files
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'  # Scans: Dockerfile, docker-compose, Terraform, CloudFormation, K8s, Helm, etc.
          scanners: 'config'
          format: 'table'
          exit-code: '0'
        continue-on-error: true

  semgrep:
    name: Semgrep - Comprehensive Static Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Semgrep - Comprehensive Security Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/javascript
            p/typescript
            p/go
            p/java
            p/csharp
            p/php
            p/ruby
            p/docker
            p/kubernetes
            p/terraform
            p/cloudformation
            p/ci
            p/owasp-top-ten
            p/r2c-security-audit
      
      - name: Upload Semgrep results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: 'semgrep-static-analysis'
        continue-on-error: true

  threat-dragon:
    name: OWASP Threat Dragon - Threat Modeling with Open Source Models
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Create threat models directory
        run: |
          mkdir -p ./threat-models/downloaded ./threat-models/local
      
      - name: Download OWASP Threat Model Templates and Examples
        run: |
          echo "Downloading threat model templates and examples from OWASP and open sources..."
          
          # Download from OWASP Threat Dragon repository examples
          curl -sL https://api.github.com/repos/OWASP/threat-dragon/releases/latest | \
            grep "browser_download_url.*json" | head -3 | cut -d '"' -f 4 | while read url; do
              if [ ! -z "$url" ]; then
                filename=$(basename "$url")
                echo "Downloading: $filename"
                curl -sL "$url" -o "./threat-models/downloaded/owasp_$filename" || echo "Failed to download $filename"
              fi
            done || echo "OWASP release examples download completed"
          
          # Download example threat models from OWASP repositories
          # Threat Dragon example models
          curl -sL https://raw.githubusercontent.com/OWASP/threat-dragon/main/src/threatmodels/example-threat-model.json \
            -o ./threat-models/downloaded/owasp_example-threat-model.json || echo "OWASP example download skipped"
          
          # Download additional threat model templates
          echo "Downloading additional open source threat model templates..."
          
          # Create a basic API threat model template
          cat > ./threat-models/downloaded/template-api-threat-model.json << 'EOF'
          {
            "summary": {
              "title": "API Threat Model Template",
              "owner": "Security Team",
              "description": "Template for API threat modeling",
              "id": "api-template"
            },
            "detail": {
              "contributors": [],
              "diagrams": [],
              "threats": []
            }
          }
          EOF
          
          # Create a web application threat model template
          cat > ./threat-models/downloaded/template-webapp-threat-model.json << 'EOF'
          {
            "summary": {
              "title": "Web Application Threat Model Template",
              "owner": "Security Team",
              "description": "Template for web application threat modeling using STRIDE methodology",
              "id": "webapp-template"
            },
            "detail": {
              "contributors": [],
              "diagrams": [],
              "threats": [
                {
                  "id": "spoofing",
                  "title": "Spoofing",
                  "severity": "High",
                  "status": "Open",
                  "description": "Authentication threats"
                },
                {
                  "id": "tampering",
                  "title": "Tampering",
                  "severity": "High",
                  "status": "Open",
                  "description": "Data integrity threats"
                },
                {
                  "id": "repudiation",
                  "title": "Repudiation",
                  "severity": "Medium",
                  "status": "Open",
                  "description": "Non-repudiation threats"
                },
                {
                  "id": "info-disclosure",
                  "title": "Information Disclosure",
                  "severity": "High",
                  "status": "Open",
                  "description": "Confidentiality threats"
                },
                {
                  "id": "dos",
                  "title": "Denial of Service",
                  "severity": "Medium",
                  "status": "Open",
                  "description": "Availability threats"
                },
                {
                  "id": "elevation",
                  "title": "Elevation of Privilege",
                  "severity": "Critical",
                  "status": "Open",
                  "description": "Authorization threats"
                }
              ]
            }
          }
          EOF
          
          echo "✅ Threat model templates downloaded"
        continue-on-error: true
      
      - name: Check for local threat model files
        id: check-threat-models
        run: |
          if find . -name "*.json" -path "*/threat*" -o -name "*threat-model*.json" | grep -q .; then
            echo "threat_models_found=true" >> $GITHUB_OUTPUT
            # Copy local threat models to collection directory
            find . -name "*threat-model*.json" -o -name "*threat*.json" | \
              grep -v "./threat-models/" | \
              xargs -I {} cp {} ./threat-models/local/ 2>/dev/null || true
          else
            echo "threat_models_found=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validate threat models
        run: |
          echo "Validating all threat models..."
          
          # Install jq if not available
          sudo apt-get update && sudo apt-get install -y jq || true
          
          VALID_COUNT=0
          INVALID_COUNT=0
          
          # Validate downloaded models
          for file in ./threat-models/downloaded/*.json; do
            if [ -f "$file" ]; then
              if jq empty "$file" 2>/dev/null; then
                echo "✓ Valid: $file"
                VALID_COUNT=$((VALID_COUNT + 1))
              else
                echo "✗ Invalid JSON: $file"
                INVALID_COUNT=$((INVALID_COUNT + 1))
              fi
            fi
          done
          
          # Validate local models
          for file in ./threat-models/local/*.json; do
            if [ -f "$file" ]; then
              if jq empty "$file" 2>/dev/null; then
                echo "✓ Valid: $file"
                VALID_COUNT=$((VALID_COUNT + 1))
              else
                echo "✗ Invalid JSON: $file"
                INVALID_COUNT=$((INVALID_COUNT + 1))
              fi
            fi
          done
          
          echo "valid_count=$VALID_COUNT" >> $GITHUB_OUTPUT
          echo "invalid_count=$INVALID_COUNT" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "📊 Validation Summary: $VALID_COUNT valid, $INVALID_COUNT invalid"
        continue-on-error: true
        id: validate-models
      
      - name: Install OWASP Threat Dragon CLI (if available)
        run: |
          echo "Attempting to install OWASP Threat Dragon CLI..."
          npm install -g @owasp/threat-dragon-cli || echo "CLI installation skipped (may not be available in npm registry)"
          npm list -g @owasp/threat-dragon-cli || echo "CLI check completed"
        continue-on-error: true
      
      - name: Generate threat model report
        run: |
          echo "Generating threat model summary report..."
          
          cat > ./threat-models/threat-models-summary.md << 'EOF'
          # Threat Models Summary
          
          ## Sources
          - **OWASP Templates**: Downloaded from OWASP Threat Dragon repository
          - **Open Source Templates**: Generated templates for common use cases
          - **Local Models**: Repository-specific threat models
          
          ## Available Threat Models
          EOF
          
          echo "" >> ./threat-models/threat-models-summary.md
          echo "### Downloaded Templates" >> ./threat-models/threat-models-summary.md
          ls -1 ./threat-models/downloaded/*.json 2>/dev/null | wc -l | xargs -I {} echo "- {} OWASP/Open Source template(s)" >> ./threat-models/threat-models-summary.md || echo "- 0 templates" >> ./threat-models/threat-models-summary.md
          
          echo "" >> ./threat-models/threat-models-summary.md
          echo "### Local Models" >> ./threat-models/threat-models-summary.md
          if [ -d ./threat-models/local ] && [ "$(ls -A ./threat-models/local 2>/dev/null)" ]; then
            ls -1 ./threat-models/local/*.json 2>/dev/null | wc -l | xargs -I {} echo "- {} local model(s)" >> ./threat-models/threat-models-summary.md
          else
            echo "- 0 local models" >> ./threat-models/threat-models-summary.md
          fi
          
          echo "" >> ./threat-models/threat-models-summary.md
          echo "## Next Steps" >> ./threat-models/threat-models-summary.md
          echo "1. Download [OWASP Threat Dragon](https://github.com/OWASP/threat-dragon) desktop application" >> ./threat-models/threat-models-summary.md
          echo "2. Open the JSON files to visualize and customize threat models" >> ./threat-models/threat-models-summary.md
          echo "3. Create custom threat models for your specific application architecture" >> ./threat-models/threat-models-summary.md
          
          echo "✅ Summary report generated"
        continue-on-error: true
      
      - name: Upload threat model artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: threat-models-complete
          path: |
            ./threat-models/downloaded/
            ./threat-models/local/
            ./threat-models/threat-models-summary.md
          retention-days: 90
      
      - name: Threat Dragon summary
        if: always()
        run: |
          echo "## 🐉 OWASP Threat Dragon Threat Modeling" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Downloaded Templates & Examples" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          DOWNLOADED=$(ls -1 ./threat-models/downloaded/*.json 2>/dev/null | wc -l || echo "0")
          LOCAL=$(ls -1 ./threat-models/local/*.json 2>/dev/null | wc -l || echo "0")
          VALID="${{ steps.validate-models.outputs.valid_count || '0' }}"
          
          echo "| Source | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📥 OWASP/Open Source Templates | $DOWNLOADED |" >> $GITHUB_STEP_SUMMARY
          echo "| 📁 Local Repository Models | $LOCAL |" >> $GITHUB_STEP_SUMMARY
          echo "| ✅ Valid Models | $VALID |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$DOWNLOADED" -gt 0 ] || [ "$LOCAL" -gt 0 ]; then
            echo "### ✅ Threat Models Processed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All threat models have been downloaded, validated, and uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Available in artifacts:**" >> $GITHUB_STEP_SUMMARY
            echo "- OWASP threat model templates and examples" >> $GITHUB_STEP_SUMMARY
            echo "- Open source threat model templates" >> $GITHUB_STEP_SUMMARY
            if [ "$LOCAL" -gt 0 ]; then
              echo "- Your repository's local threat models" >> $GITHUB_STEP_SUMMARY
            fi
            echo "- Summary report (threat-models-summary.md)" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ℹ️ No Threat Models Found" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Templates have been generated. Create custom threat models for your application." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛠️ Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "1. Download artifacts to access all threat models" >> $GITHUB_STEP_SUMMARY
          echo "2. Use [OWASP Threat Dragon desktop app](https://github.com/OWASP/threat-dragon) to open and customize" >> $GITHUB_STEP_SUMMARY
          echo "3. Create custom threat models for your specific architecture" >> $GITHUB_STEP_SUMMARY
          echo "4. Review [OWASP Top 10](https://owasp.org/www-project-top-ten/) for common threats" >> $GITHUB_STEP_SUMMARY
