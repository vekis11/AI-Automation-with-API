name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Test with pytest
      run: |
        pytest test_main.py -v --cov=main --cov-report=xml --cov-report=html --tb=short
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: Security scan with safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Security scan with bandit
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r .

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create directories
      run: |
        mkdir -p models logs
    
    - name: Test application startup
      run: |
        python -c "
        import main
        from fastapi.testclient import TestClient
        client = TestClient(main.app)
        response = client.get('/health')
        assert response.status_code == 200
        print('Application startup test passed')
        "
    
    - name: Build Docker image
      run: |
        docker build -t api-anomaly-detection:latest .
    
    - name: Test Docker container
      run: |
        docker run -d --name test-container -p 8000:8000 api-anomaly-detection:latest
        sleep 10
        curl -f http://localhost:8000/health || exit 1
        docker stop test-container
        docker rm test-container

  deploy:
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: kubectl apply -f k8s/ or docker-compose up -d
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
        # Example: curl -f https://staging-api.example.com/health

  performance:
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust
    
    - name: Run performance tests
      run: |
        python -c "
        import time
        import requests
        from concurrent.futures import ThreadPoolExecutor
        import threading
        
        def make_request():
            try:
                response = requests.get('http://localhost:8000/health', timeout=5)
                return response.status_code == 200
            except:
                return False
        
        # Start the application in background
        import subprocess
        import os
        proc = subprocess.Popen(['python', 'main.py'], 
                              stdout=subprocess.PIPE, 
                              stderr=subprocess.PIPE)
        
        # Wait for startup
        time.sleep(5)
        
        # Run performance test
        start_time = time.time()
        with ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(make_request) for _ in range(100)]
            results = [f.result() for f in futures]
        
        end_time = time.time()
        success_rate = sum(results) / len(results)
        duration = end_time - start_time
        
        print(f'Performance test results:')
        print(f'Success rate: {success_rate:.2%}')
        print(f'Duration: {duration:.2f}s')
        print(f'Requests per second: {100/duration:.2f}')
        
        # Cleanup
        proc.terminate()
        proc.wait()
        
        assert success_rate >= 0.95, f'Success rate {success_rate:.2%} below threshold'
        assert duration < 30, f'Duration {duration:.2f}s exceeds threshold'
        "
